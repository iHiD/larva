{"name":"Larva","tagline":"A Basis for Pub/Sub Daemons with Scaffold Generation.","body":"# Larva\r\n\r\n[![Build Status](https://travis-ci.org/meducation/larva.png)](https://travis-ci.org/meducation/larva)\r\n[![Dependencies](https://gemnasium.com/meducation/larva.png?travis)](https://gemnasium.com/meducation/larva)\r\n[![Code Climate](https://codeclimate.com/github/meducation/larva.png)](https://codeclimate.com/github/meducation/larva)\r\n\r\nLarva is a Ruby daemon builder based on top of the [Propono](github.com/meducation/propono) [pub/sub](http://en.wikipedia.org/wiki/Publish-subscribe_pattern) library and the [Filum](github.com/meducation/filum) logging library.\r\n\r\nIt is the foundation for daemons in Meducation's infrastructure.\r\n\r\nGetting started is simple. Just install the gem and run \r\n\r\n```ruby\r\nlarva spawn my_daemon_name\r\n```\r\n\r\n## Installation\r\n\r\nIf you want to add this to an existing daemon, add this line to your application's Gemfile:\r\n\r\n    gem 'larva'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle install\r\n\r\n## Usage\r\n\r\nLarva provides you with listeners, processors and a worker pool to quickly build an application that listens and responds to Propono messages.\r\n\r\nHere is a sample application that forms the basis of a rake task for most Meducation daemons.\r\n\r\n```ruby\r\nrequire 'larva'\r\n\r\n# Setup Config for Filum and Propono\r\n\r\nclass MyProcessor < Larva::Processor\r\n  def comment_created\r\n    # I get called when the message is received :)\r\n  end\r\nend\r\n\r\nprocessors = {my_topic: MyProcessor}\r\nLarva::WorkerPool.start(processors, \"queue-suffix\")\r\n\r\n# In another application...\r\nPropono.publish(:my_topic, {entity: \"comment\", action: \"created\", id: 8}\r\n\r\n```\r\n\r\n### Listeners\r\n\r\nLarva Listeners provide an easy way of listening to a Propono topic and processing the message, complete with lots of logging through Filum.\r\n\r\n```ruby\r\nLarva::Listener.listen(:my_topic, processor, \"queue_suffix\")\r\n```\r\n\r\nThis will listen for messages on :my_topic and pass them to `processor.process`. It will log what is happening via Filum.\r\n\r\n### Processors\r\n\r\nProcessors are used by listeners to handle the messages that are received.\r\n\r\nIf your messages have an `entity` and `action` fields, then you can create methods named `#{entity}_#{action}, which get called when a message is received.\r\n\r\nFor example:\r\n\r\n```ruby\r\nclass MyProcessor < Larva::Processor\r\n  def comment_created\r\n    # I get called for the first message\r\n  end\r\nend\r\nLarva::Listener.listen(:my_topic, MyProcessor, \"\")\r\nPropono.publish(:my_topic, {entity: \"comment\", action: \"created\", id: 8}\r\n```\r\n\r\nIf those methods do not exist, then a method called `process` is called. This method has acccess to `message`, `action`, `entity` and `id` fields. If this returns true, then the message is considered processed, else if it returns false, an error wil be logged.\r\n\r\nFor example:\r\n\r\n``` ruby\r\nclass MyProcessor\r\n  def process\r\n    if message[:foo] == bar\r\n      # Larva will consider this message processed successfully\r\n      true\r\n    else\r\n      # An error is logged for this message\r\n      false\r\n    end\r\n  end\r\nend\r\nLarva::Listener.listen(:my_topic, MyProcessor, \"\")\r\nPropono.publish(:my_topic, {foo: \"bar\"} # -> Will be logged as a success\r\nPropono.publish(:my_topic, {foo: \"meh\"} # -> Will be logged as unprocessed.\r\n```\r\n\r\n### Worker Pool\r\n\r\nThe worker pool creates a listener for each topic, and proxies messages to the associated processors. If any processors die, the application will die.\r\n\r\nCreating a worker pool is trivial:\r\n\r\n```ruby\r\nprocessors = {\r\n  my_topic_1: MyProcessor1\r\n  my_topic_2: MyProcessor2\r\n}\r\nLarva::WorkerPool.start(processors, \"queue-suffix\")\r\n```\r\n\r\n### Is it any good?\r\n\r\n[Yes.](http://news.ycombinator.com/item?id=3067434)\r\n\r\n## Contributing\r\n\r\nFirstly, thank you!! :heart::sparkling_heart::heart:\r\n\r\nWe'd love to have you involved. Please read our [contributing guide](https://github.com/meducation/larva/tree/master/CONTRIBUTING.md) for information on how to get stuck in.\r\n\r\n### Contributors\r\n\r\nThis project is managed by the [Meducation team](http://company.meducation.net/about#team).\r\n\r\nThese individuals have come up with the ideas and written the code that made this possible:\r\n\r\n- [Jeremy Walker](http://github.com/iHiD)\r\n- [Malcolm Landon](http://github.com/malcyL)\r\n- [Charles Care](http://github.com/ccare)\r\n- [Rob Styles](http://github.com/mmmmmrob)\r\n\r\n## Licence\r\n\r\nCopyright (C) 2013-2014 New Media Education Ltd\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Affero General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Affero General Public License for more details.\r\n\r\nA copy of the GNU Affero General Public License is available in [Licence.md](https://github.com/meducation/larva/blob/master/LICENCE.md)\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}